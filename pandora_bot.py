import random, asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters

players = {}
answers = {}
random_answer = None
current_question = ""
host_id = None
collecting = False
guessed_this_round = set()

# üëã –°—Ç–∞—Ä—Ç + –º–µ–Ω—é
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    players[user.id] = {"name": user.username or user.first_name, "score": 0}
    await update.message.reply_text("üëã –í—ñ—Ç–∞—é —É *–°–∫—Ä–∏–Ω—å—Ü—ñ –ü–∞–Ω–¥–æ—Ä–∏*! –û–±–µ—Ä–∏ –¥—ñ—é:",
        parse_mode="Markdown",
        reply_markup=main_menu())

# üìã –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
def main_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üîÅ –ù–æ–≤–∏–π —Ä–∞—É–Ω–¥", callback_data="begin_round")],
        [InlineKeyboardButton("‚èπ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–∞—É–Ω–¥", callback_data="end_round")],
        [InlineKeyboardButton("üëë –ü—Ä–∏–∑–Ω–∞—á–∏—Ç–∏ –≤–µ–¥—É—á–æ–≥–æ", callback_data="set_host")],
        [InlineKeyboardButton("üìä –†–∞—Ö—É–Ω–æ–∫", callback_data="score")]
    ])

# üîò –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = query.from_user
    await query.answer()

    if query.data == "begin_round":
        await begin_round(update, context, button=True)
    elif query.data == "end_round":
        await end_round(update, context, button=True)
    elif query.data == "set_host":
        host_id = user.id
        await query.edit_message_text(f"üëë @{user.username or user.first_name} —Ç–µ–ø–µ—Ä –≤–µ–¥—É—á–∏–π.")
    elif query.data == "score":
        await score(update, context)
    elif query.data == "submit_answer":
        await context.bot.send_message(chat_id=user.id, text="‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å —Å—é–¥–∏:")
    elif query.data == "show_random" and user.id == host_id:
        await show_random(update, context)
    elif query.data.startswith("guess_"):
        await process_guess(update, context, int(query.data.split("_")[1]))

# üîÅ –ü–æ—á–∞—Ç–æ–∫ —Ä–∞—É–Ω–¥—É
async def begin_round(update: Update, context: ContextTypes.DEFAULT_TYPE, button=False):
    global current_question, answers, random_answer, host_id, collecting, guessed_this_round
    host_id = update.effective_user.id
    current_question = "(–ü–∏—Ç–∞–Ω–Ω—è –∑–∞—á–∏—Ç—É—î—Ç—å—Å—è –≤–∂–∏–≤—É)"
    answers = {}
    random_answer = None
    collecting = True
    guessed_this_round.clear()

    reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("‚úçÔ∏è –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å", callback_data="submit_answer")]])
    msg_func = update.callback_query.edit_message_text if button else update.message.reply_text

    await msg_func("üß† *–ù–æ–≤–∏–π —Ä–∞—É–Ω–¥ —Ä–æ–∑–ø–æ—á–∞—Ç–æ!*
‚è≥ –£ –≤–∞—Å —î *60 —Å–µ–∫—É–Ω–¥*, —â–æ–± –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.",
        parse_mode="Markdown", reply_markup=reply_markup)

    await asyncio.sleep(60)
    collecting = False
    await context.bot.send_message(chat_id=update.effective_chat.id,
        text="‚è∞ –ß–∞—Å –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í–µ–¥—É—á–∏–π –Ω–∞—Ç–∏—Å–∫–∞—î –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ üëá",
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("üîç –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å", callback_data="show_random")]]
        ))

# ‚èπ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–∞—É–Ω–¥—É –≤—Ä—É—á–Ω—É
async def end_round(update: Update, context: ContextTypes.DEFAULT_TYPE, button=False):
    global collecting
    if update.effective_user.id != host_id:
        await (update.callback_query if button else update.message).reply_text("‚ùå –¢—ñ–ª—å–∫–∏ –≤–µ–¥—É—á–∏–π –º–æ–∂–µ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–∞—É–Ω–¥.")
        return
    collecting = False
    await context.bot.send_message(chat_id=update.effective_chat.id,
        text="üîî –†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –≤—Ä—É—á–Ω—É. –í–µ–¥—É—á–∏–π –Ω–∞—Ç–∏—Å–∫–∞—î –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ üëá",
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("üîç –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å", callback_data="show_random")]]
        ))

# ‚úâÔ∏è –ó–±—ñ—Ä –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
async def collect_answers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = update.message.text.strip()
    if user.id not in players or not collecting:
        return
    if not text or user.id in answers or text in answers.values():
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –∞–±–æ –ø–æ–≤—Ç–æ—Ä–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.")
        return
    answers[user.id] = text
    await update.message.reply_text("‚úÖ –í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑–±–µ—Ä–µ–∂–µ–Ω–∞ –∞–Ω–æ–Ω—ñ–º–Ω–æ.")

# üîç –ü–æ–∫–∞–∑ –≤–∏–ø–∞–¥–∫–æ–≤–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
async def show_random(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global random_answer
    if not answers:
        await update.callback_query.edit_message_text("‚ùå –ù–µ–º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π.")
        return
    random_id = random.choice(list(answers.keys()))
    random_answer = (random_id, answers[random_id])

    keyboard = [[InlineKeyboardButton(f"ü§î {data['name']}", callback_data=f"guess_{uid}")]
                for uid, data in players.items() if uid != host_id]
    markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_message(chat_id=update.effective_chat.id,
        text=f"üìú –í–∏–ø–∞–¥–∫–æ–≤–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å:
¬´*{random_answer[1]}*¬ª

üïµÔ∏è –•—Ç–æ —Ü–µ –Ω–∞–ø–∏—Å–∞–≤?",
        parse_mode="Markdown", reply_markup=markup)

# üéØ –û–±—Ä–æ–±–∫–∞ –≤–≥–∞–¥—É–≤–∞–Ω–Ω—è
async def process_guess(update: Update, context: ContextTypes.DEFAULT_TYPE, guessed_id: int):
    global guessed_this_round
    user = update.callback_query.from_user
    if user.id in guessed_this_round:
        await update.callback_query.answer("‚ö†Ô∏è –í–∏ –≤–∂–µ –ø—Ä–æ–±—É–≤–∞–ª–∏.")
        return
    guessed_this_round.add(user.id)
    if guessed_id == random_answer[0]:
        players[user.id]["score"] += 1
        await update.callback_query.edit_message_text(f"üéâ {user.first_name} –≤–≥–∞–¥–∞–≤(–ª–∞) –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
    else:
        await update.callback_query.edit_message_text(f"‚ùå {user.first_name} –ø–æ–º–∏–ª–∏–≤—Å—è(–ª–∞—Å—å).")

# üìä –†–∞—Ö—É–Ω–æ–∫
async def score(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = "üèÜ –†–∞—Ö—É–Ω–æ–∫:
" + "\n".join([f"{v['name']}: {v['score']} –±–∞–ª—ñ–≤" for v in players.values()])
    if update.callback_query:
        await update.callback_query.edit_message_text(text)
    else:
        await update.message.reply_text(text)

# üöÄ –ó–∞–ø—É—Å–∫
def main():
    app = ApplicationBuilder().token("7491368320:AAEnRYGYWj_UuDx62RuHAytDmZjAJJ0J1Ps").build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, collect_answers))
    app.run_polling()

if __name__ == "__main__":
    main()
