import asyncio
import random
import os
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters

load_dotenv()
players = {}
answers = {}
joined_players = set()
random_answer = None
host_id = None
collecting = False
guessing = False
guessed = {}

# /startgame ‚Äî —ñ–Ω—ñ—Ü—ñ—é—î –≥—Ä—É
async def startgame(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global joined_players, host_id
    joined_players.clear()
    host_id = update.effective_user.id
    await update.message.reply_text(
        "üé≤ –ì—Ä–∞ —Ä–æ–∑–ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è! –ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É, —â–æ–± –¥–æ–ª—É—á–∏—Ç–∏—Å—å.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üôã‚Äç‚ôÄÔ∏è –î–æ–ª—É—á–∏—Ç–∏—Å—å –¥–æ –≥—Ä–∏", callback_data="join_game")],
            [InlineKeyboardButton("‚úÖ –ü–æ—á–∞—Ç–∏ –≥—Ä—É", callback_data="begin_round")]
        ])
    )

# –ö–Ω–æ–ø–∫–∏
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = query.from_user
    await query.answer()

    if query.data == "join_game":
        joined_players.add(user.id)
        players[user.id] = {"name": user.username or user.first_name, "score": 0}
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"{user.first_name} –¥–æ–ª—É—á–∏–≤—Å—è –¥–æ –≥—Ä–∏ üéâ"
        )

    elif query.data == "begin_round" and user.id == host_id:
        await begin_round(update, context)

    elif query.data == "show_random" and user.id == host_id:
        await show_random(update, context)

    elif query.data.startswith("guess_") and guessing:
        await process_guess(update, context, int(query.data.split("_")[1]))

# –ü–æ—á–∞—Ç–æ–∫ —Ä–∞—É–Ω–¥—É
async def begin_round(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global answers, collecting, guessed, guessing
    answers.clear()
    guessed.clear()
    collecting = True
    guessing = False
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="üß† –ü–æ—á–∞–ª–∏! –£ –≤–∞—Å —î 90 —Å–µ–∫—É–Ω–¥ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å. –ü–∏—à—ñ—Ç—å –ø—Ä—è–º–æ –≤ —á–∞—Ç."
    )
    await asyncio.sleep(90)
    if collecting:
        await end_collection(context)

# –ó–±—ñ—Ä –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
async def collect_answers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global collecting
    user = update.effective_user
    if collecting and user.id in joined_players and user.id not in answers:
        answers[user.id] = update.message.text
        await update.message.reply_text("‚úÖ –í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑–∞–ø–∏—Å–∞–Ω–∞!")

# –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–±–æ—Ä—É
async def end_collection(context: ContextTypes.DEFAULT_TYPE):
    global collecting, random_answer, guessing
    collecting = False
    if not answers:
        await context.bot.send_message(chat_id=list(joined_players)[0], text="‚ùå –ù–µ–º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π.")
        return

    random_id = random.choice(list(answers.keys()))
    random_answer = (random_id, answers[random_id])
    guessing = True

    keyboard = [
        [InlineKeyboardButton(players[uid]["name"], callback_data=f"guess_{uid}")]
        for uid in joined_players if uid != host_id
    ]
    markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_message(
    chat_id=update.effective_chat.id,
    text=f"üìú *–í–∏–ø–∞–¥–∫–æ–≤–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å:*\n¬´‚≠ë{random_answer[1]}‚≠ë¬ª\n\nüïµÔ∏è –•—Ç–æ —Ü–µ –Ω–∞–ø–∏—Å–∞–≤?",
    parse_mode="Markdown",
    reply_markup=markup)
    await asyncio.sleep(60)
    await end_guessing(context)

# –í–≥–∞–¥—É–≤–∞–Ω–Ω—è
async def process_guess(update: Update, context: ContextTypes.DEFAULT_TYPE, guessed_id: int):
    global guessed
    user = update.effective_user
    if user.id in guessed:
        await update.callback_query.answer("‚ùó –í–∏ –≤–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞–ª–∏.")
        return
    guessed[user.id] = guessed_id
    await update.callback_query.answer("‚úÖ –í–∞—à –≤–∞—Ä—ñ–∞–Ω—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")

# –ü—ñ–¥–±–∏—Ç—Ç—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
async def end_guessing(context: ContextTypes.DEFAULT_TYPE):
    global guessing
    guessing = False
    if not random_answer:
        return

    correct_id = random_answer[0]
    winners = [uid for uid, gid in guessed.items() if gid == correct_id]

    if winners:
        for uid in winners:
            players[uid]["score"] += 1
        names = ", ".join([players[uid]["name"] for uid in winners])
        result = f"üéØ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≥–∞–¥–∞–ª–∏: {names}!"
    else:
        result = "‚ùå –ù—ñ—Ö—Ç–æ –Ω–µ –≤–≥–∞–¥–∞–≤."

    await context.bot.send_message(chat_id=list(joined_players)[0], text=result)
    await show_score(context)

# –†–∞—Ö—É–Ω–æ–∫
async def score(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = "üèÜ –†–∞—Ö—É–Ω–æ–∫:\n" + "\n".join([f"{v['name']}: {v['score']} –±–∞–ª—ñ–≤" for v in players.values()])
    if update.callback_query:
        await update.callback_query.edit_message_text(text)
    else:
        await update.message.reply_text(text)

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –í—ñ—Ç–∞—é! –ù–∞–ø–∏—à–∏ /startgame —â–æ–± –ø–æ—á–∞—Ç–∏ –Ω–æ–≤—É –≥—Ä—É.")

# main
def main():
    app = ApplicationBuilder().token("7491368320:AAEnRYGYWj_UuDx62RuHAytDmZjAJJ0J1Ps").build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("startgame", startgame))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, collect_answers))
    app.run_polling()

if __name__ == "__main__":
    main()
