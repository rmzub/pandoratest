import asyncio
import random
import os
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters

# Load environment variables (for your bot token)
BOT_TOKEN = "7491368320:AAEnRYGYWj_UuDx62RuHAytDmZjAJJ0J1Ps" # Make sure you have TELEGRAM_BOT_TOKEN in your .env file

# Global game state variables
players = {}  # Stores player data {user_id: {"name": "username", "score": 0}}
answers = {}  # Stores answers from players {user_id: "answer_text"}
joined_players = set()  # Set of user_ids of players who joined the current game
random_answer_data = None  # Stores the (user_id, answer_text) of the randomly selected answer
host_id = None  # user_id of the person who started the game
group_chat_id = None # chat_id of the group where the game is running
collecting_answers_active = False  # Flag to indicate if the bot is currently collecting answers
guessing_active = False  # Flag to indicate if the bot is currently in the guessing phase
player_guesses = {} # Stores guesses from players {guesser_user_id: guessed_user_id}
answer_collection_task = None # To store the asyncio task for answer collection timeout

# 1. /start - Welcomes the user
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Sends a welcome message when the /start command is issued."""
    await update.message.reply_text("üëã –í—ñ—Ç–∞—é! –Ø –±–æ—Ç –¥–ª—è –≥—Ä–∏ '–°–∫—Ä–∏–Ω—å–∫–∞ –ü–∞–Ω–¥–æ—Ä–∏'.\n"
                                     "–ù–∞–ø–∏—à–∏ /startgame —É –≥—Ä—É–ø–æ–≤–æ–º—É —á–∞—Ç—ñ, —â–æ–± –ø–æ—á–∞—Ç–∏ –Ω–æ–≤—É –≥—Ä—É.\n"
                                     "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–π /help –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –ø—Ä–∞–≤–∏–ª.")

# 2. /help - Explains the game rules
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Sends game rules when /help is issued."""
    await update.message.reply_text(
        "üìñ *–ü—Ä–∞–≤–∏–ª–∞ –≥—Ä–∏ –°–∫—Ä–∏–Ω—å–∫–∞ –ü–∞–Ω–¥–æ—Ä–∏:*\n\n"
        "1. –í–µ–¥—É—á–∏–π (—Ç–æ–π, —Ö—Ç–æ –ø–æ—á–∞–≤ –≥—Ä—É) –∑–∞–ø—É—Å–∫–∞—î –≥—Ä—É –∫–æ–º–∞–Ω–¥–æ—é `/startgame` —É –≥—Ä—É–ø–æ–≤–æ–º—É —á–∞—Ç—ñ.\n"
        "2. –Ü–Ω—à—ñ —É—á–∞—Å–Ω–∏–∫–∏ –Ω–∞—Ç–∏—Å–∫–∞—é—Ç—å –∫–Ω–æ–ø–∫—É ¬´üôã‚Äç‚ôÄÔ∏è –î–æ–ª—É—á–∏—Ç–∏—Å—å –¥–æ –≥—Ä–∏¬ª, —â–æ–± –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è.\n"
        "3. –ö–æ–ª–∏ –≤–µ–¥—É—á–∏–π –Ω–∞—Ç–∏—Å–∫–∞—î ¬´‚úÖ –ü–æ—á–∞—Ç–∏ —Ä–∞—É–Ω–¥¬ª, –±–æ—Ç –Ω–∞–¥—Å–∏–ª–∞—î –≤—Å—ñ–º –≥—Ä–∞–≤—Ü—è–º (–æ–∫—Ä—ñ–º –≤–µ–¥—É—á–æ–≥–æ) –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –ø—Ä–∏–≤–∞—Ç–Ω—ñ —á–∞—Ç–∏ –∑ –ø—Ä–æ—Ö–∞–Ω–Ω—è–º –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —É—è–≤–Ω–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è.\n"
        "4. –ì—Ä–∞–≤—Ü—ñ –º–∞—é—Ç—å 60 —Å–µ–∫—É–Ω–¥, —â–æ–± –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–≤–æ—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å –±–æ—Ç—É —É –ø—Ä–∏–≤–∞—Ç–Ω–∏–π —á–∞—Ç. –í–µ–¥—É—á–∏–π —Ç–∞–∫–æ–∂ –º–æ–∂–µ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–±—ñ—Ä –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –¥–æ—Å—Ç—Ä–æ–∫–æ–≤–æ –∫–Ω–æ–ø–∫–æ—é –≤ –≥—Ä—É–ø–æ–≤–æ–º—É —á–∞—Ç—ñ.\n"
        "5. –ü—ñ—Å–ª—è –∑–±–æ—Ä—É –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π, –±–æ—Ç –≤–∏–ø–∞–¥–∫–æ–≤–∏–º —á–∏–Ω–æ–º –æ–±–∏—Ä–∞—î –æ–¥–Ω—É –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π —ñ –ø–æ–∫–∞–∑—É—î —ó—ó –≤—Å—ñ–º –≥—Ä–∞–≤—Ü—è–º (–æ–∫—Ä—ñ–º –∞–≤—Ç–æ—Ä–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Ç–∞ –≤–µ–¥—É—á–æ–≥–æ) —É –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö —á–∞—Ç–∞—Ö.\n"
        "6. –ì—Ä–∞–≤—Ü—ñ –º–∞—é—Ç—å 60 —Å–µ–∫—É–Ω–¥, —â–æ–± –≤–≥–∞–¥–∞—Ç–∏, —Ö—Ç–æ —î –∞–≤—Ç–æ—Ä–æ–º —Ü—ñ—î—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∑ —ñ–º'—è–º —ñ–Ω—à–æ–≥–æ –≥—Ä–∞–≤—Ü—è.\n"
        "7. –ü—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —á–∞—Å—É –Ω–∞ –≤–≥–∞–¥—É–≤–∞–Ω–Ω—è, –±–æ—Ç –æ–≥–æ–ª–æ—à—É—î –≤ –≥—Ä—É–ø–æ–≤–æ–º—É —á–∞—Ç—ñ, —Ö—Ç–æ –∞–≤—Ç–æ—Ä –æ–±—Ä–∞–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ, —Ö—Ç–æ –∑–∞ –∫–æ–≥–æ –≥–æ–ª–æ—Å—É–≤–∞–≤, —ñ —Ö—Ç–æ –≤–≥–∞–¥–∞–≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n"
        "8. –ì—Ä–∞–≤—Ü—ñ, —è–∫—ñ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≥–∞–¥–∞–ª–∏ –∞–≤—Ç–æ—Ä–∞, –æ—Ç—Ä–∏–º—É—é—Ç—å 1 –±–∞–ª. –ê–≤—Ç–æ—Ä –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ, —è–∫—É –Ω–µ –≤–≥–∞–¥–∞–ª–∏, —Ç–∞–∫–æ–∂ –º–æ–∂–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –±–∞–ª–∏ (—Ü–µ –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —è–∫ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è –≥—Ä–∏).\n"
        "9. –ì—Ä–∞ –º–æ–∂–µ —Ç—Ä–∏–≤–∞—Ç–∏ –¥–µ–∫—ñ–ª—å–∫–∞ —Ä–∞—É–Ω–¥—ñ–≤. –í–µ–¥—É—á–∏–π –º–æ–∂–µ –ø–æ—á–∞—Ç–∏ –Ω–æ–≤–∏–π —Ä–∞—É–Ω–¥ –∫–Ω–æ–ø–∫–æ—é ¬´üîÑ –ù–æ–≤–∏–π —Ä–∞—É–Ω–¥¬ª.\n"
        "10. –ü–µ—Ä–µ–º–∞–≥–∞—î –Ω–∞–π–∫–º—ñ—Ç–ª–∏–≤—ñ—à–∏–π –≥—Ä–∞–≤–µ—Ü—å –∑ –Ω–∞–π–±—ñ–ª—å—à–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é –±–∞–ª—ñ–≤!\n\n"
        "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /score, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫.",
        parse_mode="Markdown"
    )

# 3. /startgame ‚Äî Initiates the game in a group chat
async def startgame(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Initiates a new game. Only works in group chats."""
    global joined_players, host_id, players, answers, group_chat_id, player_guesses, random_answer_data
    global collecting_answers_active, guessing_active

    chat_type = update.effective_chat.type
    if chat_type == "private":
        await update.message.reply_text("–¶—é –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –ª–∏—à–µ –≤ –≥—Ä—É–ø–æ–≤–∏—Ö —á–∞—Ç–∞—Ö.")
        return

    # Reset game state for a new game
    joined_players.clear()
    players.clear()
    answers.clear()
    player_guesses.clear()
    random_answer_data = None
    collecting_answers_active = False
    guessing_active = False

    host_id = update.effective_user.id
    group_chat_id = update.effective_chat.id # Store the group chat ID

    players[host_id] = {"name": update.effective_user.username or update.effective_user.first_name, "score": 0}
    joined_players.add(host_id) # Host is also a player (can be changed if host shouldn't play)

    await update.message.reply_text(
        f"üé≤ –ù–æ–≤–∞ –≥—Ä–∞ '–°–∫—Ä–∏–Ω—å–∫–∞ –ü–∞–Ω–¥–æ—Ä–∏' —Ä–æ–∑–ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è! –í–µ–¥—É—á–∏–π: {players[host_id]['name']}.\n"
        "–ì—Ä–∞–≤—Ü—ñ, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É, —â–æ–± –¥–æ–ª—É—á–∏—Ç–∏—Å—å.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üôã‚Äç‚ôÄÔ∏è –î–æ–ª—É—á–∏—Ç–∏—Å—å –¥–æ –≥—Ä–∏", callback_data="join_game")],
            [InlineKeyboardButton("‚úÖ –ü–æ—á–∞—Ç–∏ —Ä–∞—É–Ω–¥", callback_data="begin_round")]
        ])
    )
    await context.bot.send_message(chat_id=group_chat_id, text=f"{players[host_id]['name']} –¥–æ–ª—É—á–∏–≤—Å—è –¥–æ –≥—Ä–∏ —è–∫ –≤–µ–¥—É—á–∏–π üéâ")


# 4. Button Handler ‚Äî Handles all inline button presses
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handles callbacks from inline buttons."""
    global joined_players, host_id, players, collecting_answers_active, guessing_active, group_chat_id, answer_collection_task
    query = update.callback_query
    user = query.from_user
    await query.answer() # Acknowledge the button press

    # --- Join Game Button ---
    if query.data == "join_game":
        if user.id in joined_players:
            await context.bot.send_message(
                chat_id=query.message.chat_id, # Send to group chat
                text=f"{user.first_name}, —Ç–∏ –≤–∂–µ —É –≥—Ä—ñ! üòä"
            )
        else:
            joined_players.add(user.id)
            players[user.id] = {"name": user.username or user.first_name, "score": 0}
            await context.bot.send_message(
                chat_id=query.message.chat_id, # Send to group chat
                text=f"{players[user.id]['name']} –¥–æ–ª—É—á–∏–≤—Å—è –¥–æ –≥—Ä–∏ üéâ"
            )

    # --- Begin Round Button (Host Only) ---
    elif query.data == "begin_round":
        if user.id != host_id:
            await query.answer("–¢—ñ–ª—å–∫–∏ –≤–µ–¥—É—á–∏–π –º–æ–∂–µ –ø–æ—á–∞—Ç–∏ —Ä–∞—É–Ω–¥.", show_alert=True)
            return
        if len(joined_players) < 2: # Need at least 2 players (e.g., host + 1 other, or 2 non-hosts)
                                    # If host doesn't submit an answer, need at least 1 other player.
                                    # If host also submits an answer, need at least 2 players for guessing.
            await context.bot.send_message(chat_id=group_chat_id, text="–î–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–∞—É–Ω–¥—É –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ö–æ—á–∞ –± 2 –≥—Ä–∞–≤—Ü—ñ (–≤–∫–ª—é—á–∞—é—á–∏ –≤–µ–¥—É—á–æ–≥–æ, —è–∫—â–æ –≤—ñ–Ω –≥—Ä–∞—î).")
            return
        await begin_round(context) # Pass context directly

    # --- End Answer Collection Early (Host Only) ---
    elif query.data == "end_collection_early":
        if user.id != host_id:
            await query.answer("–¢—ñ–ª—å–∫–∏ –≤–µ–¥—É—á–∏–π –º–æ–∂–µ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–±—ñ—Ä –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π.", show_alert=True)
            return
        if collecting_answers_active:
            if answer_collection_task:
                answer_collection_task.cancel() # Cancel the timeout task
            await end_answer_collection(context) # Proceed to end collection
        else:
            await query.answer("–ó–±—ñ—Ä –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π —â–µ –Ω–µ —Ä–æ–∑–ø–æ—á–∞—Ç–æ –∞–±–æ –≤–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.", show_alert=True)

    # --- Guessing Buttons (Player Action) ---
    elif query.data.startswith("guess_") and guessing_active:
        if query.message.chat.type != "private":
            await query.answer("‚ùó –í–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –ª–∏—à–µ —É –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö –∑ –±–æ—Ç–æ–º.", show_alert=True)
            return
        guessed_player_id = int(query.data.split("_")[1])
        await process_player_guess(update, context, guessed_player_id)

    # --- New Round Button (Host Only, appears after a round) ---
    elif query.data == "new_round":
        if user.id != host_id:
            await query.answer("–¢—ñ–ª—å–∫–∏ –≤–µ–¥—É—á–∏–π –º–æ–∂–µ –ø–æ—á–∞—Ç–∏ –Ω–æ–≤–∏–π —Ä–∞—É–Ω–¥.", show_alert=True)
            return
        await begin_round(context)


# 5. Begin Round ‚Äî Starts the answer collection phase
async def begin_round(context: ContextTypes.DEFAULT_TYPE):
    """Starts a new round: resets answers, notifies players to submit answers."""
    global answers, collecting_answers_active, guessing_active, player_guesses, random_answer_data, group_chat_id, answer_collection_task

    if not group_chat_id:
        print("Error: group_chat_id not set before begin_round")
        # Potentially send a message to host if possible, or log error
        return

    answers.clear()
    player_guesses.clear()
    random_answer_data = None
    collecting_answers_active = True
    guessing_active = False

    # Message to the group chat
    host_markup = InlineKeyboardMarkup([
        [InlineKeyboardButton("üî¥ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–±—ñ—Ä –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π", callback_data="end_collection_early")]
    ])
    await context.bot.send_message(
        chat_id=group_chat_id,
        text="üìù –†–æ–∑–ø–æ—á–∞—Ç–æ –Ω–æ–≤–∏–π —Ä–∞—É–Ω–¥! –£—á–∞—Å–Ω–∏–∫–∏, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –±–æ—Ç–∞.\n"
             "–£ –≤–∞—Å —î 60 —Å–µ–∫—É–Ω–¥, —â–æ–± –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–≤–æ—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å.\n"
             "–í–µ–¥—É—á–∏–π –º–æ–∂–µ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–±—ñ—Ä –¥–æ—Å—Ç—Ä–æ–∫–æ–≤–æ.",
        reply_markup=host_markup
    )

    # DM players to submit answers
    players_to_dm = [pid for pid in joined_players if pid != host_id] # Host doesn't submit an answer in this version
                                                                     # If host should also answer, remove `if pid != host_id`

    if not players_to_dm:
        await context.bot.send_message(
            chat_id=group_chat_id,
            text="ü§∑ –ù–µ–º–∞—î –≥—Ä–∞–≤—Ü—ñ–≤ –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å (–æ–∫—Ä—ñ–º –≤–µ–¥—É—á–æ–≥–æ). –†–∞—É–Ω–¥ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–π."
        )
        collecting_answers_active = False # Stop collection if no one to ask
        # Optionally, allow host to restart or add players
        await context.bot.send_message(
            chat_id=group_chat_id,
            text="–í–µ–¥—É—á–∏–π, –≤–∏ –º–æ–∂–µ—Ç–µ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –ø–æ—á–∞—Ç–∏ –Ω–æ–≤–∏–π —Ä–∞—É–Ω–¥, –∫–æ–ª–∏ –≥—Ä–∞–≤—Ü—ñ –¥–æ–ª—É—á–∞—Ç—å—Å—è.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîÑ –ù–æ–≤–∏–π —Ä–∞—É–Ω–¥", callback_data="new_round")]])
        )
        return

    for user_id in players_to_dm:
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text="‚úçÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à–∏ —Å–≤–æ—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ (—É—è–≤–Ω–µ) –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –≤–µ–¥—É—á–æ–≥–æ —Ç–∞ –Ω–∞–¥—ñ—à–ª–∏ —ó—ó –º–µ–Ω—ñ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."
            )
        except Exception as e:
            print(f"Error sending DM to user {user_id}: {e}")
            await context.bot.send_message(
                chat_id=group_chat_id,
                text=f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≥—Ä–∞–≤—Ü—é {players.get(user_id, {}).get('name', user_id)}. –ú–æ–∂–ª–∏–≤–æ, –≤—ñ–Ω –Ω–µ –ø–æ—á–∏–Ω–∞–≤ —á–∞—Ç –∑ –±–æ—Ç–æ–º."
            )

    # Schedule the end of answer collection
    answer_collection_task = asyncio.create_task(schedule_end_collection(context, 60))


async def schedule_end_collection(context: ContextTypes.DEFAULT_TYPE, delay: int):
    """Waits for a 'delay' and then ends answer collection if still active."""
    await asyncio.sleep(delay)
    if collecting_answers_active: # Check if collection wasn't ended early by host
        await context.bot.send_message(
            chat_id=group_chat_id,
            text="‚è∞ –ß–∞—Å –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤–∏–π—à–æ–≤!"
        )
        await end_answer_collection(context)

# 6. Collect Answers ‚Äî Handles messages from players in private chat
async def collect_player_answers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Collects answers sent by players in private chat."""
    global collecting_answers_active, answers

    user = update.effective_user
    if update.message.chat.type != "private": # Only accept answers in DMs
        return

    if collecting_answers_active and user.id in joined_players and user.id != host_id: # Host doesn't answer
        if user.id not in answers:
            answers[user.id] = update.message.text
            await update.message.reply_text("‚úÖ –í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ø—Ä–∏–π–Ω—è—Ç–∞ —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∞!")
            # Optional: Notify host or group that a player has answered
            # await context.bot.send_message(chat_id=group_chat_id, text=f"üëç {players[user.id]['name']} –Ω–∞–¥—ñ—Å–ª–∞–≤ —Å–≤–æ—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å.")
        else:
            await update.message.reply_text("‚ùó –í–∏ –≤–∂–µ –Ω–∞–¥—ñ—Å–ª–∞–ª–∏ —Å–≤–æ—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É —Ü—å–æ–º—É —Ä–∞—É–Ω–¥—ñ.")
    elif not collecting_answers_active and user.id in joined_players:
        await update.message.reply_text("‚ö†Ô∏è –ù–∞ –∂–∞–ª—å, —á–∞—Å –¥–ª—è –∑–±–æ—Ä—É –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –≤–∂–µ –≤–∏–π—à–æ–≤.")
    # Ignore messages if not collecting or user not in game

# 7. End Answer Collection ‚Äî Transitions to the guessing phase
async def end_answer_collection(context: ContextTypes.DEFAULT_TYPE):
    """Ends the answer collection phase and starts the guessing phase if answers exist."""
    global collecting_answers_active, random_answer_data, guessing_active, group_chat_id

    collecting_answers_active = False # Stop collecting new answers

    if not answers:
        await context.bot.send_message(
            chat_id=group_chat_id,
            text="üôÅ –ù–∞ –∂–∞–ª—å, –∂–æ–¥–µ–Ω –≥—Ä–∞–≤–µ—Ü—å –Ω–µ –Ω–∞–¥—ñ—Å–ª–∞–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—å. –†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.\n"
                 "–í–µ–¥—É—á–∏–π, –º–æ–∂–µ—Ç–µ –ø–æ—á–∞—Ç–∏ –Ω–æ–≤–∏–π —Ä–∞—É–Ω–¥.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîÑ –ù–æ–≤–∏–π —Ä–∞—É–Ω–¥", callback_data="new_round")]])
        )
        return

    # Select a random answer
    author_id, answer_text = random.choice(list(answers.items()))
    random_answer_data = {"author_id": author_id, "text": answer_text}
    guessing_active = True

    await context.bot.send_message(
        chat_id=group_chat_id,
        text=f"ü§´ –ó–±—ñ—Ä –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –í—Å—å–æ–≥–æ –æ—Ç—Ä–∏–º–∞–Ω–æ: {len(answers)}.\n"
             f"–ó–∞—Ä–∞–∑ —è –Ω–∞–¥—ñ—à–ª—é –≤–∏–ø–∞–¥–∫–æ–≤—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≥—Ä–∞–≤—Ü—è–º –¥–ª—è –≤–≥–∞–¥—É–≤–∞–Ω–Ω—è. –£ –≤–∞—Å –±—É–¥–µ 60 —Å–µ–∫—É–Ω–¥."
    )

    # Prepare list of players for guessing (excluding the author of the random answer and the host)
    potential_authors_for_buttons = {
        pid: pdata["name"] for pid, pdata in players.items()
        if pid in answers and pid != host_id # Only those who submitted answers and are not the host
    }

    # Send the random answer to players (excluding author and host) for guessing
    for player_id in joined_players:
        if player_id == host_id or player_id == random_answer_data["author_id"]:
            continue # Host and author don't guess their own answer

        # Create buttons for guessing - show names of other players who submitted answers
        guess_buttons = []
        for p_id, p_name in potential_authors_for_buttons.items():
            if p_id != player_id: # A player cannot guess themselves
                 guess_buttons.append([InlineKeyboardButton(p_name, callback_data=f"guess_{p_id}")])

        if not guess_buttons:
            try:
                await context.bot.send_message(
                    chat_id=player_id,
                    text=f"üìú *–û—Å—å –≤–∏–ø–∞–¥–∫–æ–≤–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å:*\n¬´{random_answer_data['text']}¬ª\n\n"
                         f"ü§î –ù–∞ –∂–∞–ª—å, –Ω–µ–º–∞—î —ñ–Ω—à–∏—Ö –≥—Ä–∞–≤—Ü—ñ–≤, —á–∏—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å –º–æ–∂–Ω–∞ –±—É–ª–æ –± –≤–≥–∞–¥–∞—Ç–∏."
                         f"–û—á—ñ–∫—É—î–º–æ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏.",
                    parse_mode="Markdown"
                )
            except Exception as e:
                print(f"Error sending guess prompt (no buttons) to {player_id}: {e}")
            continue


        markup = InlineKeyboardMarkup(guess_buttons)
        try:
            await context.bot.send_message(
                chat_id=player_id,
                text=f"üìú *–û—Å—å –≤–∏–ø–∞–¥–∫–æ–≤–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å:*\n¬´{random_answer_data['text']}¬ª\n\n"
                     f"üïµÔ∏è –Ø–∫ —Ç–∏ –¥—É–º–∞—î—à, —Ö—Ç–æ —Ü–µ –Ω–∞–ø–∏—Å–∞–≤? –û–±–µ—Ä–∏ –∑—ñ —Å–ø–∏—Å–∫—É –Ω–∏–∂—á–µ:",
                parse_mode="Markdown",
                reply_markup=markup
            )
        except Exception as e:
            print(f"Error sending guess prompt to user {player_id}: {e}")
            await context.bot.send_message(
                chat_id=group_chat_id,
                text=f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–∞–ø–∏—Ç –Ω–∞ –≤–≥–∞–¥—É–≤–∞–Ω–Ω—è –≥—Ä–∞–≤—Ü—é {players.get(player_id,{}).get('name', player_id)}."
            )

    # Schedule the end of guessing
    asyncio.create_task(schedule_end_guessing(context, 60))


async def schedule_end_guessing(context: ContextTypes.DEFAULT_TYPE, delay: int):
    """Waits for 'delay' and then ends guessing phase if still active."""
    await asyncio.sleep(delay)
    if guessing_active: # Check if results weren't processed earlier for some reason
        await context.bot.send_message(
            chat_id=group_chat_id,
            text="‚è∞ –ß–∞—Å –Ω–∞ –≤–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤–∏–π—à–æ–≤!"
        )
        await end_guessing_phase(context)


# 8. Process Player Guess ‚Äî Handles a player's guess from a private chat button
async def process_player_guess(update: Update, context: ContextTypes.DEFAULT_TYPE, guessed_player_id: int):
    """Processes a player's guess."""
    global player_guesses, guessing_active

    user = update.effective_user

    if not guessing_active:
        await update.callback_query.answer("‚è≥ –ß–∞—Å –¥–ª—è –≤–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤–∂–µ –≤–∏–π—à–æ–≤!", show_alert=True)
        return

    if user.id not in joined_players or user.id == host_id or user.id == random_answer_data["author_id"]:
        await update.callback_query.answer("üö´ –¢–∏ –Ω–µ –º–æ–∂–µ—à –±—Ä–∞—Ç–∏ —É—á–∞—Å—Ç—å —É –≤–≥–∞–¥—É–≤–∞–Ω–Ω—ñ —Ü—å–æ–≥–æ —Ä–∞–∑—É.", show_alert=True)
        return

    if user.id in player_guesses:
        await update.callback_query.answer("‚ùó –¢–∏ –≤–∂–µ –∑—Ä–æ–±–∏–≤ —Å–≤—ñ–π –≤–∏–±—ñ—Ä —É —Ü—å–æ–º—É —Ä–∞—É–Ω–¥—ñ.", show_alert=True)
        return

    player_guesses[user.id] = guessed_player_id
    guessed_player_name = players.get(guessed_player_id, {}).get("name", "–ù–µ–≤—ñ–¥–æ–º–∏–π –≥—Ä–∞–≤–µ—Ü—å")
    await update.callback_query.edit_message_text(text=f"‚úÖ –¢–≤—ñ–π –≤–∞—Ä—ñ–∞–Ω—Ç ({guessed_player_name}) –ø—Ä–∏–π–Ω—è—Ç–æ!")
    # await context.bot.send_message(chat_id=user.id, text=f"üïµÔ∏è –¢–≤—ñ–π –≤–∞—Ä—ñ–∞–Ω—Ç ({guessed_player_name}) –ø—Ä–∏–π–Ω—è—Ç–æ!")


# 9. End Guessing Phase ‚Äî Calculates scores and announces results
async def end_guessing_phase(context: ContextTypes.DEFAULT_TYPE):
    """Ends the guessing phase, calculates scores, and announces results."""
    global guessing_active, players, player_guesses, random_answer_data, group_chat_id

    if not guessing_active: # Avoid double processing
        return
    guessing_active = False

    if not random_answer_data:
        await context.bot.send_message(chat_id=group_chat_id, text="–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤–∏–ø–∞–¥–∫–æ–≤—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏.")
        return

    author_id = random_answer_data["author_id"]
    author_name = players.get(author_id, {}).get("name", "–ù–µ–≤—ñ–¥–æ–º–∏–π –∞–≤—Ç–æ—Ä")
    random_answer_text = random_answer_data["text"]

    results_message = f"üßê *–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ä–∞—É–Ω–¥—É!*\n\n–û–±—Ä–∞–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: ¬´{random_answer_text}¬ª\n"
    results_message += f"‚úçÔ∏è –ê–≤—Ç–æ—Ä —Ü—ñ—î—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: *{author_name}*\n\n"

    # --- Requirement 5: Show who voted for whom ---
    if player_guesses:
        results_message += "üó≥ *–•—Ç–æ –∑–∞ –∫–æ–≥–æ –≥–æ–ª–æ—Å—É–≤–∞–≤:*\n"
        for guesser_id, guessed_id in player_guesses.items():
            guesser_name = players.get(guesser_id, {}).get("name", f"–ì—Ä–∞–≤–µ—Ü—å {guesser_id}")
            choice_name = players.get(guessed_id, {}).get("name", f"–ì—Ä–∞–≤–µ—Ü—å {guessed_id}")
            results_message += f"  - {guesser_name} –ø–æ–¥—É–º–∞–≤(–ª–∞) –Ω–∞: *{choice_name}*\n"
    else:
        results_message += "üí® –ù—ñ—Ö—Ç–æ –Ω–µ –Ω–∞–º–∞–≥–∞–≤—Å—è –≤–≥–∞–¥–∞—Ç–∏.\n"
    results_message += "\n"

    winners = []
    for guesser_user_id, guessed_author_id in player_guesses.items():
        if guessed_author_id == author_id:
            winners.append(guesser_user_id)
            players[guesser_user_id]["score"] += 1

    if winners:
        winner_names = ", ".join([players[uid]["name"] for uid in winners])
        results_message += f"üéâ *–ü—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≥–∞–¥–∞–ª–∏: {winner_names}!* –í–æ–Ω–∏ –æ—Ç—Ä–∏–º—É—é—Ç—å –ø–æ 1 –±–∞–ª—É.\n"
    else:
        results_message += f"üíî *–ù–∞ –∂–∞–ª—å, —Ü—å–æ–≥–æ —Ä–∞–∑—É –Ω—ñ—Ö—Ç–æ –Ω–µ –≤–≥–∞–¥–∞–≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.*\n"

    await context.bot.send_message(chat_id=group_chat_id, text=results_message, parse_mode="Markdown")
    await show_current_scores(context, group_chat_id) # Show scores after results

    # Offer host to start a new round
    host_markup = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîÑ –ù–æ–≤–∏–π —Ä–∞—É–Ω–¥", callback_data="new_round")],
        [InlineKeyboardButton("üìä –†–∞—Ö—É–Ω–æ–∫", callback_data="show_score_button")] # Can be handled by /score too
    ])
    await context.bot.send_message(
        chat_id=group_chat_id,
        text="–í–µ–¥—É—á–∏–π, –±–∞–∂–∞—î—Ç–µ –ø–æ—á–∞—Ç–∏ –Ω–æ–≤–∏–π —Ä–∞—É–Ω–¥?",
        reply_markup=host_markup
    )

# 10. /score or button "Show Score" ‚Äî Displays current scores
async def show_current_scores_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handles the /score command to show scores."""
    chat_id_to_send = update.effective_chat.id
    await show_current_scores(context, chat_id_to_send)

async def show_current_scores_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handles the 'show_score_button' callback to show scores."""
    query = update.callback_query
    await query.answer()
    chat_id_to_send = query.message.chat_id
    await show_current_scores(context, chat_id_to_send, message_to_edit=query.message)


async def show_current_scores(context: ContextTypes.DEFAULT_TYPE, chat_id: int, message_to_edit=None):
    """Helper function to format and send the current scores."""
    if not players:
        score_text = "üèÜ –†–∞—Ö—É–Ω–æ–∫:\n–©–µ –Ω—ñ—Ö—Ç–æ –Ω–µ –≥—Ä–∞–≤ –∞–±–æ —Ä–∞—Ö—É–Ω–∫–∏ –ø–æ—Ä–æ–∂–Ω—ñ."
    else:
        score_text = "üèÜ *–ü–æ—Ç–æ—á–Ω–∏–π –†–∞—Ö—É–Ω–æ–∫:*\n"
        sorted_players = sorted(players.items(), key=lambda item: item[1]["score"], reverse=True)
        for user_id, data in sorted_players:
            score_text += f"  - {data['name']}: {data['score']} –±–∞–ª(—ñ–≤)\n"

    if message_to_edit:
        try:
            await message_to_edit.edit_text(text=score_text, parse_mode="Markdown")
        except Exception: # If message is identical or other error, send new
            await context.bot.send_message(chat_id=chat_id, text=score_text, parse_mode="Markdown")
    else:
        await context.bot.send_message(chat_id=chat_id, text=score_text, parse_mode="Markdown")


# Main function to set up and run the bot
def main():
    """Sets up the bot handlers and starts polling."""
    if not BOT_TOKEN:
        print("Error: TELEGRAM_BOT_TOKEN not found in .env file or environment variables.")
        return

    print("Bot is starting...")
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # Command Handlers
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("startgame", startgame))
    app.add_handler(CommandHandler("score", show_current_scores_command))

    # Callback Query Handler (for all inline buttons)
    app.add_handler(CallbackQueryHandler(button_handler))

    # Message Handler (for collecting answers in private chat)
    # Filters for text messages, in private chat, and not commands
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & filters.ChatType.PRIVATE, collect_player_answers))

    print("Bot is polling for updates...")
    app.run_polling()

if __name__ == "__main__":
    main()
